@inject AppData AppData
@inject HttpClient Http

<Container Fluid Margin="Margin.Is4.FromBottom">
     <Steps SelectedStep="@selectedStep" SelectedStepChanged="@OnSelectedStepChanged">
         <Items>
             <Step Name="stepIntro">Intro</Step>
             <Step Name="stepGame">Game</Step>
             <Step Name="stepFinish">Finish</Step>
         </Items>
         <Content>
             <StepPanel Name="stepIntro">
                 <GameStartComponent GameStarted="@gameStartedHandler" BoardIdChanged="onBoardIdChangedHandler" />
             </StepPanel>
             <StepPanel Name="stepGame">
                 <GameComponent @ref=gameComponentRef GameBoardId="@BoardId" 
                                                      GameEndedSuccsess="onGameEndedSuccesHandler" 
                                                      GameOver="onGameOverHandler" />
             </StepPanel>

             <StepPanel Name="stepFinish">
                 @if (IsGameSuccess)
                 {
                      <Row Margin="Margin.Is2.FromStart">
                         <Column Flex="Flex.JustifyContent.Center">
                            <Heading Size="HeadingSize.Is3" TextColor="TextColor.Success">Congratulations Grid Master!</Heading>
                         </Column>
                     </Row>
                    <Row Margin="Margin.Is2.FromStart">
                        <Column Flex="Flex.JustifyContent.Center">
                            <Heading Size="HeadingSize.Is3" TextColor="TextColor.Success">You have successfully completed the game!</Heading>
                        </Column>
                    </Row>
                    <Row Margin="Margin.Is4.FromStart.Is4.FromEnd">
                        <Column Flex="Flex.JustifyContent.Center">
                            <Heading Size="HeadingSize.Is5">Your completion time: @(Math.Round(ElapsedTime, 0)) seconds!</Heading>
                        </Column>
                    </Row>
                    <Row Margin="Margin.Is2.FromStart">
                        <Column Flex="Flex.JustifyContent.Center">
                            <Button Color="Color.Primary" Clicked="PlayAgain" Block>Click here to play again</Button>
                        </Column>
                    </Row>
                 }
             </StepPanel>
         </Content>
     </Steps>
 </Container>

@code {
    [Inject] INotificationService? NotificationService { get; set; }
    [Inject] public IMessageService? MessageService { get; set; }

    [Parameter] public string GameId { get; set; } = "testGame";
    [Parameter] public string DeviceId { get; set; } = "test";
    [Parameter] public string BoardId { get; set; } = "testBoard";
    [Parameter] public string PlayerId { get; set; } = "fyziktom";
    [Parameter] public string PlayerName { get; set; } = "fyziktom";
    [Parameter] public EventCallback<string> PlayerNameChanged { get; set; }
    [Parameter] public EventCallback<string> GameIdChanged { get; set; }
    [Parameter] public EventCallback<string> PlayerIdChanged { get; set; }
    [Parameter] public EventCallback<string> BoardIdChanged { get; set; }
    [Parameter] public EventCallback<string> GameStarted { get; set; }

    public bool IsGameEnded = false;
    public bool IsGameStarted = false;
    public bool IsGameSuccess = false;
    public bool IsGameOver = false;

    public double ElapsedTime
    {
        get
        {
            if (AppData.GameResponseDataHistory.TryGetValue(GameId, out var response))
                return response.ActualElapsedGameTime;
            else
                return 0.0;
        }
    }


    GameComponent? gameComponentRef;

    string selectedStep = "stepIntro";


    private async Task onBoardIdChangedHandler(string boardId)
    {
        BoardId = boardId;
        await InvokeAsync(StateHasChanged);
    }

    private async Task gameStartedHandler(StartGameInfo info)
    {
        if (gameComponentRef != null)
            await gameComponentRef.NewGame(info.GameId, info.GameBoardId, info.DeviceId);
        GameId = info.GameId;
        BoardId = info.GameBoardId;
        DeviceId = info.DeviceId;
        PlayerId = info.PlayerId;

        AppData.ActualRunningDeviceId = DeviceId;
        AppData.ActualRunningGameId = GameId;
        AppData.ActualRunningGameBoardId = BoardId;
        AppData.ActualRunningPlayerId = PlayerId;
        AppData.ActualRunningPlayerName = PlayerName;

        selectedStep = "stepGame";
        IsGameEnded = false;
        IsGameStarted = true;
        IsGameSuccess = false;
        IsGameOver = false;
        await InvokeAsync(StateHasChanged);
    }

    private async Task onGameEndedSuccesHandler(string gameId)
    {
        selectedStep = "stepFinish";
        IsGameEnded = true;
        IsGameStarted = false;
        IsGameSuccess = true;
        IsGameOver = false;
        //await EndGame();
        await InvokeAsync(StateHasChanged);
    } 

    private async Task onGameOverHandler(string gameId)
    {
        selectedStep = "stepFinish";
        IsGameEnded = true;
        IsGameStarted = false;
        IsGameSuccess = false;
        IsGameOver = true;
        //await EndGame();
        await InvokeAsync(StateHasChanged);
    }

    private Task OnSelectedStepChanged(string name)
    {
        selectedStep = name;
        return Task.CompletedTask;
    }

    private async Task EndGame()
    {
        if (await EndGameRequest())
        {
            AppData.GameResponseDataHistory.TryRemove(GameId, out var response);
            //if (gameComponentRef != null)
            //    await gameComponentRef.NewGame(GameId);
        }

    }

    public async Task<bool> EndGameRequest()
    {
        try
        {
            var response = await Http.GetStringAsync($"api/EndGame/{GameId}");
            Console.WriteLine("End game response:" + response);
            if (response == "OK")
            {
                await Task.Delay(100);
                return true;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Cannot end the game: \n" + ex.Message);
        }

        return false;
    }

    private async Task PlayAgain(MouseEventArgs e)
    {
        selectedStep = "stepIntro";
        IsGameEnded = false;
        IsGameStarted = false;
        IsGameSuccess = false;
        IsGameOver = false;
        AppData.GameResponseDataHistory.TryRemove(GameId, out var response);

        GameId = "default";
        await InvokeAsync(StateHasChanged);
    }

    void NextStep(string[] args)
    {
        if (selectedStep == "stepIntro")
            selectedStep = "stepGame";
        else if (selectedStep == "stepGame")
            selectedStep = "stepFinish";
    }

    void PreviousStep(string[] args)
    {
        if (selectedStep == "stepFinish")
            selectedStep = "stepIntro";
        else if (selectedStep == "stepGame")
            selectedStep = "stepIntro";
    }
}