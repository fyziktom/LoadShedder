@using Newtonsoft.Json;
@inject HttpClient Http

<Row Margin="Margin.Is4.FromTop">
    <Column Background="Background.Light" Border="Border.Is3.Rounded.Light" ColumnSize="ColumnSize.Is5">
        <Row Margin="Margin.Is1.FromTop">
            <Column>
                <Heading Size="HeadingSize.Is4">Producers</Heading>
            </Column>
        </Row>

        <Row Margin="Margin.Is1.FromTop" Flex="Flex.JustifyContent.Center">

            @foreach (var gamepiece in Sources)
            {
                @if (gamepiece.EnergyValue != 0)
                {
                    @if (!gamepiece.IsPlugged)
                    {
                        <Column ColumnSize="ColumnSize.IsAuto" Padding="Padding.Is2" style="width: 30%;">
                            <Div Border="Border.Is1.Rounded" style="background-color: #afafaf; padding: 5px;">
                                <Div style="display: grid; grid-template-columns: 2fr 1fr;">
                                    <Div style="">
                                        <Text TextSize="TextSize.Small" Margin="Margin.Is1.FromBottom">@gamepiece.Name</Text><br>
                                            <Button Clicked="@(() => PlacePiece(gamepiece.ExpectedVoltage.ToString()))"
                                                Color="Color.Secondary" Size="Size.ExtraSmall">
                                                <Icon Name="IconName.Add" Margin="Margin.Is2.FromEnd" />
                                                <small>Plug</small>
                                            </Button>
                                        </Div>
                                        <Div style="text-align:end">
                                            <Text TextSize="TextSize.ExtraLarge" TextWeight="TextWeight.Bold">@(gamepiece.EnergyValue /
                                1000)</Text><br>
                                            <Text TextSize="TextSize.ExtraSmall">MW</Text>
                                        </Div>
                                    </Div>
                                </Div>
                            </Column>
                    }
                    else
                    {
                        <Column ColumnSize="ColumnSize.IsAuto" Padding="Padding.Is2" style="width: 30%;">
                            <Div Border="Border.Is1.Rounded" style="background-color: #c8f492; padding: 5px;">
                                <Div style="display: grid; grid-template-columns: 2fr 1fr;">
                                    <Div style="">
                                        <Text TextSize="TextSize.Small" Margin="Margin.Is1.FromBottom">@gamepiece.Name</Text><br>
                                            <Button Clicked="@(() => RemovePiece(gamepiece.ExpectedVoltage.ToString()))"
                                                Color="Color.Secondary" Size="Size.ExtraSmall">
                                                <Icon Name="IconName.Remove" Margin="Margin.Is2.FromEnd" />
                                                <small>Unplug</small>
                                            </Button>
                                        </Div>
                                        <Div style="text-align:end">
                                            <Text TextSize="TextSize.ExtraLarge" TextWeight="TextWeight.Bold">@(gamepiece.EnergyValue /
                                1000)</Text><br>
                                            <Text TextSize="TextSize.ExtraSmall">MW</Text>
                                        </Div>
                                    </Div>
                                </Div>
                            </Column>
                    }
                }
            }
        </Row>
    </Column>
    <Column Background="Background.Light" Border="Border.Is3.Rounded.Light" ColumnSize="ColumnSize.Is5.Is2.WithOffset">
        <Row Margin="Margin.Is1.FromTop">
            <Column>
                <Heading Size="HeadingSize.Is4">Consumers</Heading>
            </Column>
        </Row>
        <Row Margin="Margin.Is1.FromTop" Flex="Flex.JustifyContent.Center">

            @foreach (var gamepiece in Consumers)
            {
                @if (!gamepiece.IsPlugged)
                {
                    <Column ColumnSize="ColumnSize.IsAuto" Padding="Padding.Is2" style="width: 30%;">
                        <Div Border="Border.Is1.Rounded" style="background-color: #eeeeee;padding: 5px;">
                            <Div style="display: grid; grid-template-columns: 2fr 1fr;">
                                <Div style="">
                                    <Text TextSize="TextSize.Small" Margin="Margin.Is1.FromBottom">@gamepiece.Name</Text>
                                        <Button Clicked="@(() => PlacePiece(gamepiece.ExpectedVoltage.ToString()))"
                                            Color="Color.Secondary" Size="Size.ExtraSmall">
                                            <Icon Name="IconName.Add" Margin="Margin.Is2.FromEnd" />
                                            <small>Plug</small>
                                        </Button>
                                    </Div>
                                    <Div style="text-align:end">
                                        <Text TextSize="TextSize.ExtraLarge" TextWeight="TextWeight.Bold">@(gamepiece.EnergyValue /
                                1000)</Text><br>
                                        <Text TextSize="TextSize.ExtraSmall">MW</Text>
                                    </Div>
                                </Div>
                            </Div>
                        </Column>
                }
                else
                {
                    <Column ColumnSize="ColumnSize.IsAuto" Padding="Padding.Is2" style="width: 30%;">
                        <Div Border="Border.Is1.Rounded" style="background-color: #c8f492; padding: 5px;">
                            <Div style="display: grid; grid-template-columns: 2fr 1fr;">
                                <Div style="">
                                    <Text TextSize="TextSize.Small" Margin="Margin.Is1.FromBottom">@gamepiece.Name</Text>
                                        <Button Clicked="@(() => RemovePiece(gamepiece.ExpectedVoltage.ToString()))"
                                            Color="Color.Secondary" Size="Size.ExtraSmall">
                                            <Icon Name="IconName.Delete" Margin="Margin.Is2.FromEnd" />
                                            <small>Unplug</small>
                                        </Button>
                                    </Div>
                                    <Div style="text-align:end">
                                        <Text TextSize="TextSize.ExtraLarge" TextWeight="TextWeight.Bold">@(gamepiece.EnergyValue /
                                1000)</Text><br>
                                        <Text TextSize="TextSize.ExtraSmall">MW</Text>
                                    </Div>
                                </Div>
                            </Div>
                        </Column>
                }
            }
        </Row>
    </Column>
</Row>

@code {

    [Parameter]
    public EventCallback<string> OnBoardChanged { get; set; }
    [Parameter] public string DeviceId { get; set; } = "test";
    [Parameter] public string GameBoardId { get; set; } = "testBoard";

    public string ApiCommand { get; set; } = "/api/NewDeviceData";

    public int[] Board { get; set; } = new int[32];

    public List<GamePiece> Sources
    {
        get => GamePieces.Values.Where(p => p.GamePieceType == GamePieceTypes.Source).ToList();
    }
    public List<GamePiece> Consumers
    {
        get => GamePieces.Values.Where(p => p.GamePieceType == GamePieceTypes.Consumer).ToList();
    }

    Dictionary<string, GamePiece> GamePieces = new Dictionary<string, GamePiece>();

    private Timer _timer;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await getGamePieces();
            _timer = new Timer(async (e) => { await PeriodicPost(); }, null, TimeSpan.Zero, TimeSpan.FromSeconds(1));
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public async Task ClearKeyboard(string boardId, string deviceId)
    {
        if (!string.IsNullOrEmpty(boardId))
            GameBoardId = boardId;

        if (!string.IsNullOrEmpty(deviceId))
            DeviceId = deviceId;

        for (int i = 0; i < Board.Length; i++)
            Board[i] = 0;

        foreach (var gp in GamePieces.Values)
            gp.IsPlugged = false;

        await SendData();
        await InvokeAsync(StateHasChanged);
    }

    private async Task PeriodicPost()
    {
        try
        {
            await SendData();
        }
        catch (Exception ex)
        {
            Console.WriteLine("Cannot send periodic data: \n" + ex.Message);
        }
    }

    private async Task getGamePieces()
    {
        try
        {
            var result = await Http.GetFromJsonAsync<Dictionary<string, GamePiece>>("api/GetGamePieces");
            if (result != null)
                GamePieces = result;
        }
        catch (Exception ex)
        {
            Console.WriteLine("Cannot get GamePieces request response: \n" + ex.Message);
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task PlacePiece(string gamePieceId)
    {
        if (GamePieces.TryGetValue(gamePieceId, out var gamePiece))
        {
            Board[gamePiece.DedicatedChannelNumber] = (int)gamePiece.ExpectedVoltage;

            foreach (var gp in GamePieces.Values.Where(p => p.DedicatedChannelNumber == gamePiece.DedicatedChannelNumber))
                gp.IsPlugged = false;

            gamePiece.IsPlugged = true;
        }
        await ProcessRequest();
    }

    private async Task RemovePiece(string gamePieceId)
    {
        if (GamePieces.TryGetValue(gamePieceId, out var gamePiece))
        {
            Board[gamePiece.DedicatedChannelNumber] = 0;
            gamePiece.IsPlugged = false;
            await ProcessRequest();
        }
    }

    private async Task ProcessRequest()
    {

        await SendData();
        await InvokeAsync(StateHasChanged);
        await OnBoardChanged.InvokeAsync("BoardChanged");
    }

    private async Task<string> SendData()
    {
        var obj = new
        {
            id = DeviceId,
            data = Board
        };

        var cnt = JsonConvert.SerializeObject(obj);

        using (var content = new StringContent(cnt, System.Text.Encoding.UTF8, "application/json"))
        {
            HttpResponseMessage result = await Http.PostAsync("/" + ApiCommand.TrimStart('/'), content);
            if (result.StatusCode == System.Net.HttpStatusCode.OK)
            {
                var returnStr = await result.Content.ReadAsStringAsync();

                if (returnStr != null)
                    return returnStr;
                else
                    return "ERROR:Cannot read return message.";
            }
        }

        return string.Empty;
    }
}
