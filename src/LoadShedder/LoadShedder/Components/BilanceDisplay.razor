@using Newtonsoft.Json;
@inject HttpClient client

<Row Margin="Margin.Is2.FromTop">
    <Column Flex="Flex.JustifyContent.Center">
        <Heading Size="HeadingSize.Is3">Actual Board Bilance</Heading>
    </Column>
</Row>

<Row Margin="Margin.Is1.FromTop">
    <Column Flex="Flex.JustifyContent.Center">
        <Row>
            <Column>
                <Span>Bilance Sources</Span>
            </Column>
        </Row>
        <Row>
            <Column>
                @if (BilanceSources >= 1000)
                {
                    <Span TextColor="TextColor.Dark" TextWeight="TextWeight.Bold">
                        @($"{(Math.Round((BilanceSources / 1000), 4))} MW")
                    </Span>
                }
                else if (BilanceSources < 1000 && BilanceSources > 0)
                {
                    <Span TextColor="TextColor.Dark" TextWeight="TextWeight.Bold">
                        @($"{Math.Round(BilanceSources, 4)} kW")
                    </Span>
                }
                else if (BilanceSources == 0)
                {
                    <Span TextColor="TextColor.Success" TextWeight="TextWeight.Bold">
                        @($"{Math.Round(BilanceSources, 4)} kW")
                    </Span>
                }
                else if (BilanceSources < 0 && BilanceSources > -1000)
                {
                    <Span TextColor="TextColor.Danger" TextWeight="TextWeight.Bold">
                        @($"{Math.Round(BilanceSources, 4)} kW")
                    </Span>
                }
                else if (BilanceSources <= -1000)
                {
                    <Span TextColor="TextColor.Danger" TextWeight="TextWeight.Bold">
                        @($"{(Math.Round((BilanceSources / 1000), 4))} MW")
                    </Span>
                }
            </Column>
        </Row>
    </Column>
    <Column Flex="Flex.JustifyContent.Center">
        <Row>
            <Column>
                <Span>Total Bilance</Span>
            </Column>
        </Row>
        <Row>
            <Column>
                @if (Bilance >= 1000)
                {
                    <Span TextColor="TextColor.Dark" TextWeight="TextWeight.Bold">
                        @($"{(Math.Round((Bilance / 1000), 4))} MW")
                    </Span>
                }
                else if (Bilance < 1000 && Bilance > 0)
                {
                    <Span TextColor="TextColor.Dark" TextWeight="TextWeight.Bold">
                        @($"{Math.Round(Bilance, 4)} kW")
                    </Span>
                }
                else if (Bilance == 0)
                {
                    <Span TextColor="TextColor.Success" TextWeight="TextWeight.Bold">
                        @($"{Math.Round(Bilance, 4)} kW")
                    </Span>
                }
                else if (Bilance < 0 && Bilance > -1000)
                {
                    <Span TextColor="TextColor.Danger" TextWeight="TextWeight.Bold">
                        @($"{Math.Round(Bilance, 4)} kW")
                    </Span>
                }
                else if (Bilance <= -1000)
                {
                    <Span TextColor="TextColor.Danger" TextWeight="TextWeight.Bold">
                        @($"{(Math.Round((Bilance / 1000), 4))} MW")
                    </Span>
                }

            </Column>
        </Row>
    </Column>
    <Column Flex="Flex.JustifyContent.Center">
        <Row>
            <Column>
                <Span>Bilance Consumers</Span>
            </Column>
        </Row>
        <Row>
            <Column>
        @if (BilanceConsumers >= 1000)
        {
            <Span TextColor="TextColor.Dark" TextWeight="TextWeight.Bold">
                @($"{(Math.Round((BilanceConsumers / 1000), 4))} MW")
            </Span>
        }
        else if (BilanceConsumers < 1000 && BilanceConsumers > 0)
        {
            <Span TextColor="TextColor.Dark" TextWeight="TextWeight.Bold">
                @($"{Math.Round(BilanceConsumers, 4)} kW")
            </Span>
        }
        else if (BilanceConsumers == 0)
        {
            <Span TextColor="TextColor.Success" TextWeight="TextWeight.Bold">
                @($"{Math.Round(BilanceConsumers, 4)} kW")
            </Span>
        }
        else if (BilanceConsumers < 0 && BilanceConsumers > -1000)
        {
            <Span TextColor="TextColor.Danger" TextWeight="TextWeight.Bold">
                @($"{Math.Round(BilanceConsumers, 4)} kW")
            </Span>
        }
        else if (BilanceConsumers <= -1000)
        {
            <Span TextColor="TextColor.Danger" TextWeight="TextWeight.Bold">
                @($"{(Math.Round((BilanceConsumers / 1000), 4))} MW")
            </Span>
        }
        </Column>
        </Row>
    </Column>
</Row>

@code {
    [Parameter]
    public string BoardId { get; set; } = "testBoard";
    [Parameter]
    public double OnBilanceChanged { get; set; }
    [Parameter]
    public double Bilance { get; set; } = 0.0;
    [Parameter] public double BilanceSources { get; set; } = 0.0;
    [Parameter] public double BilanceConsumers { get; set; } = 0.0;

    public string ApiCommand { get; set; } = "/api/NewDeviceData";

    public async Task Refresh()
    {
        await GetBilance();
        await GetBilanceForSources();
        await GetBilanceForConsumers();
        await InvokeAsync(StateHasChanged);
    }

    private async Task<double> GetBilance()
    {
        try
        {
            var response = client.GetStringAsync($"api/GetBoardBilance/{BoardId}");
            Bilance = double.Parse(await response, System.Globalization.CultureInfo.InvariantCulture);
            return Bilance;
        }
        catch(Exception ex)
        {
            Console.WriteLine("Cannot get board bilance");
        }

        return 0.0;
    }

    private async Task<double> GetBilanceForSources()
    {
        try
        {
            var response = client.GetStringAsync($"api/GetBoardSourcesBilance/{BoardId}");
            BilanceSources = double.Parse(await response, System.Globalization.CultureInfo.InvariantCulture);
            return BilanceSources;
        }
        catch (Exception ex)
        {
            Console.WriteLine("Cannot get board bilance");
        }

        return 0.0;
    }

    private async Task<double> GetBilanceForConsumers()
    {
        try
        {
            var response = client.GetStringAsync($"api/GetBoardConsumersBilance/{BoardId}");
            BilanceConsumers = double.Parse(await response, System.Globalization.CultureInfo.InvariantCulture);
            return BilanceConsumers;
        }
        catch(Exception ex)
        {
            Console.WriteLine("Cannot get board bilance");
        }

        return 0.0;
    }
}
