@inject HttpClient Http

<Row>
    <Column>
        <Field>
            <FieldBody>
                <Addons>
                    <Addon AddonType="AddonType.Start">
                        <Dropdown Display="Display.Block">
                            <DropdownToggle Color="Color.Light">
                                <Icon Name="IconName.Star" IconStyle="IconStyle.Solid" IconSize="IconSize.Small" Margin="Margin.Is1.FromEnd" />
                            </DropdownToggle>
                            <DropdownMenu MaxMenuHeight="350px">
                                @foreach (var device in Devices.Values)
                                {
                                    <DropdownItem Value="@device.Name" Clicked="@((e) => onSelectAddressHandler(device.Id))">
                                        <Field>
                                            <FieldLabel>@device.Name</FieldLabel>
                                            <FieldHelp>@device.Id</FieldHelp>
                                        </Field>
                                    </DropdownItem>
                                }
                            </DropdownMenu>
                        </Dropdown>
                    </Addon>
                    <Addon AddonType="AddonType.Body">
                        <Tooltip Text="Click to copy to clipboard" Placement="TooltipPlacement.Bottom">
                            <Heading Margin="Margin.Is3.FromStart.Is2.FromTop" 
                                     Size="HeadingSize.Is6" 
                                     CopyToClipboard="true" 
                                     TextOverflow="TextOverflow.Wrap">
                                    @if (!string.IsNullOrEmpty(DeviceId) && DeviceId != "Please select")
                                    {
                                        @DeviceName
                                    }
                                    else
                                    {
                                        @("Please select")
                                    }
                                    </Heading>
                        </Tooltip>
                    </Addon>
                </Addons>
            </FieldBody>
        </Field>
    </Column>
</Row>

@code {
    [Parameter] public string DeviceId { get; set; } = "Please select";
    [Parameter] public EventCallback<string> DeviceIdChanged { get; set; }

    public Dictionary<string, Device> Devices { get; set; } = new Dictionary<string, Device>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await getDevices();

        await base.OnAfterRenderAsync(firstRender);
    }

    public string DeviceName
    {
        get
        {
            if (!string.IsNullOrEmpty(DeviceId) && DeviceId != "Please select")
                if (Devices.TryGetValue(DeviceId, out var device))
                    return device.Name;
            return "Please select";
        }
    }

    private async Task getDevices()
    {
        var result = await Http.GetFromJsonAsync<Dictionary<string, Device>>("api/GetDevices");
        if (result != null)
            Devices = result;

        await InvokeAsync(StateHasChanged);
    }

    private async Task onSelectAddressHandler(string deviceId)
    {
        if (!string.IsNullOrEmpty(deviceId))
            DeviceId = deviceId;
        else
            DeviceId = string.Empty;
        await DeviceIdChanged.InvokeAsync(DeviceId);
        await InvokeAsync(StateHasChanged);
    }
}
