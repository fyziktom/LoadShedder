@using Newtonsoft.Json;
@inject HttpClient Http
@inject AppData AppData

<Row Margin="Margin.Is2.FromTop.Is5.FromBottom">
    <Column Flex="Flex.JustifyContent.Center">
        <img alt="The Whiteout Game" src="game_logo.png" style="height: 145px;">
    </Column>
</Row>

<Row>
    <Column Flex="Flex.JustifyContent.Center">
        <Lead TextSize="TextSize.Large">Welcome to Aqualectra's Load Shedder Game!</Lead>
    </Column>
</Row>
<Row>
    <Column Flex="Flex.JustifyContent.Center">
        <Paragraph TextSize="TextSize.Large">Experience the power grid like never before as you take on the challenge of maintaining balance in the energetic grid.<br>
            Get ready to immerse yourself in the world of energy distribution and conservation! 
            </Paragraph>
    </Column>
</Row>
<Row Margin="Margin.Is2.FromTop.Is5.FromBottom">
    <Column Flex="Flex.JustifyContent.Center">
        <Paragraph TextSize="TextSize.Large">
            Enter your name to start and prepare yourself to become a grid master.
        </Paragraph>
    </Column>
</Row>

<Row>
    <Column ColumnSize="ColumnSize.Is6.Is3.WithOffset">
        <Fields>
            <Field>
                <TextEdit Placeholder="name or nickname" @bind-Text="PlayerName" @onchange="playerNameChanged"
                    Size="Size.Large" />
                @if (!string.IsNullOrEmpty(PlayerName))
                {
                    <FieldHelp>
                        Please fill in a unique name or nickname
                    </FieldHelp>
                }
            </Field>
            <Field>
                <Button Color="Color.Primary" Clicked="StartGame" Loading="@isLoading" Block Size="Size.Large">Start
                     Game</Button>
             </Field>

         </Fields>
     </Column>
 </Row>



 @code {
    [Parameter] public string GameId { get; set; } = "testGame";
    [Parameter] public string DeviceId { get; set; } = "test";
    [Parameter] public string BoardId { get; set; } = "testBoard";
    [Parameter] public string PlayerId { get; set; } = "fyziktom";
    [Parameter] public string PlayerName { get; set; } = "fyziktom";
    [Parameter] public EventCallback<string> PlayerNameChanged { get; set; }
    [Parameter] public EventCallback<string> GameIdChanged { get; set; }
    [Parameter] public EventCallback<string> DeviceIdChanged { get; set; }
    [Parameter] public EventCallback<string> PlayerIdChanged { get; set; }
    [Parameter] public EventCallback<string> BoardIdChanged { get; set; }
    [Parameter] public EventCallback<StartGameInfo> GameStarted { get; set; }

    private bool isLoading = false;

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        return base.OnAfterRenderAsync(firstRender);
    }

    private async Task playerNameChanged(ChangeEventArgs e)
    {
        if (e != null && e.Value != null)
            await PlayerNameChanged.InvokeAsync((string)e.Value);
    }

    private async Task onGameChangedHandler(string id)
    {
        if (id != null)
            GameId = id;

        await InvokeAsync(StateHasChanged);
    }

    private async Task<string> AddPlayer()
    {
        var obj = new
        {
            name = PlayerName,
            description = "",
            boardid = BoardId
        };

        var cnt = JsonConvert.SerializeObject(obj);

        using (var content = new StringContent(cnt, System.Text.Encoding.UTF8, "application/json"))
        {
            HttpResponseMessage result = await Http.PostAsync("api/AddPlayer", content);
            if (result.StatusCode == System.Net.HttpStatusCode.OK)
            {
                var returnStr = await result.Content.ReadAsStringAsync();

                if (returnStr != null)
                {
                    Console.WriteLine("AddPlayer response: " + returnStr);
                    PlayerId = returnStr;
                    await PlayerIdChanged.InvokeAsync(PlayerId);
                    //await AddPlayerToBoard(returnStr);
                    return returnStr;
                }
                else
                    return "ERROR:Cannot read return message.";
            }
        }

        return string.Empty;
    }

    private async Task<string> AddDevice(string playerId)
    {
        var obj = new
        {
            name = "default_device"
        };

        var cnt = JsonConvert.SerializeObject(obj);

        using (var content = new StringContent(cnt, System.Text.Encoding.UTF8, "application/json"))
        {
            HttpResponseMessage result = await Http.PostAsync("api/AddDevice", content);
            if (result.StatusCode == System.Net.HttpStatusCode.OK)
            {
                var returnStr = await result.Content.ReadAsStringAsync();

                if (returnStr != null)
                {
                    Console.WriteLine("AddDevice response: " + returnStr);
                    await DeviceIdChanged.InvokeAsync(DeviceId);
                    DeviceId = returnStr;
                    await AddGameBoard(returnStr, playerId);
                    return returnStr;
                }
                else
                    return "ERROR:Cannot read return message.";
            }
        }

        return string.Empty;
    }

    private async Task<string> AddGameBoard(string deviceId, string playerId)
    {
        var obj = new
        {
            name = PlayerName,
            description = "",
            playerid = playerId,
            deviceid = deviceId
        };

        var cnt = JsonConvert.SerializeObject(obj);

        using (var content = new StringContent(cnt, System.Text.Encoding.UTF8, "application/json"))
        {
            HttpResponseMessage result = await Http.PostAsync("api/AddGameBoard", content);
            if (result.StatusCode == System.Net.HttpStatusCode.OK)
            {
                var returnStr = await result.Content.ReadAsStringAsync();

                if (returnStr != null)
                {
                    Console.WriteLine("AddPlayer response: " + returnStr);
                    BoardId = returnStr;
                    await BoardIdChanged.InvokeAsync(BoardId);
                    await AddPlayerToBoard(returnStr);
                    return returnStr;
                }
                else
                    return "ERROR:Cannot read return message.";
            }
        }

        return string.Empty;
    }

    private async Task<string> AddPlayerToBoard(string playerId)
    {
        var obj = new
        {
            gameboardid = BoardId,
            playerid = playerId
        };

        var cnt = JsonConvert.SerializeObject(obj);

        using (var content = new StringContent(cnt, System.Text.Encoding.UTF8, "application/json"))
        {
            HttpResponseMessage result = await Http.PostAsync("api/AddPlayerToGameBoard", content);
            if (result.StatusCode == System.Net.HttpStatusCode.OK)
            {
                var returnStr = await result.Content.ReadAsStringAsync();

                if (returnStr != null)
                {
                    Console.WriteLine("AddPlayerToBoard response: " + returnStr);
                    return returnStr;
                }
                else
                    return "ERROR:Cannot read return message.";
            }
        }

        return string.Empty;
    }

    private async Task<string> AddBoardToGame()
    {
        var obj = new
        {
            gameid = GameId,
            gameboardid = BoardId
        };

        var cnt = JsonConvert.SerializeObject(obj);

        using (var content = new StringContent(cnt, System.Text.Encoding.UTF8, "application/json"))
        {
            HttpResponseMessage result = await Http.PostAsync("api/AddGameBoardToGame", content);
            if (result.StatusCode == System.Net.HttpStatusCode.OK)
            {
                var returnStr = await result.Content.ReadAsStringAsync();

                if (returnStr != null)
                {
                    Console.WriteLine("AddPlayerToBoard response: " + returnStr);
                    return returnStr;
                }
                else
                    return "ERROR:Cannot read return message.";
            }
        }

        return string.Empty;
    }

    private async Task<string> AddGame()
    {
        var obj = new
        {
            name = PlayerName,
            gameboards = new List<string> { BoardId }
        };

        var cnt = JsonConvert.SerializeObject(obj);

        using (var content = new StringContent(cnt, System.Text.Encoding.UTF8, "application/json"))
        {
            HttpResponseMessage result = await Http.PostAsync("api/AddGame", content);
            if (result.StatusCode == System.Net.HttpStatusCode.OK)
            {
                var returnStr = await result.Content.ReadAsStringAsync();

                if (returnStr != null)
                {
                    Console.WriteLine("AddGame response: " + returnStr);
                    GameId = returnStr;
                    await GameIdChanged.InvokeAsync(GameId);
                    return returnStr;
                }
                else
                    return "ERROR:Cannot read return message.";
            }
        }

        return string.Empty;
    }

    public async Task StartGame()
    {
        try
        {
            isLoading = true;

            await AddPlayer();
            await AddDevice(PlayerId);
            await AddGame();
            await AddBoardToGame();

            var response = await Http.GetStringAsync($"api/StartGame/{GameId}");
            Console.WriteLine("Start game response:" + response);
            if (response == "OK")
            {
                await Task.Delay(100);
                isLoading = false;
                await GameStarted.InvokeAsync(new StartGameInfo()
                    {
                        DeviceId = DeviceId,
                        GameId = GameId,
                        GameBoardId = BoardId,
                        PlayerId = PlayerId,
                        PlayerName = PlayerName
                    });
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Cannot start the game: \n" + ex.Message);
        }
    }
}