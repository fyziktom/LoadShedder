@inject HttpClient Http
@inject AppData AppData

<Row Margin="Margin.Is3.FromTop.Is2.FromBottom">
    <Column Flex="Flex.JustifyContent.Center">
        Elapsed time: @(Math.Round(ElapsedTime, 0)) seconds
    </Column>
</Row>
<Row Margin="Margin.Is3.FromTop.Is2.FromBottom">
    <Column Flex="Flex.JustifyContent.Center">
        @if (GameStage == GamePlayStage.Start || GameStage == GamePlayStage.LoadOfSources)
        {
            <Span>
                Let's get started by adding energy sources until you reach a total of 75 MW. Avoid adding consumers
                rightaway, as they could lead to a BLACKOUT.
            </Span>
        }
        else if (GameStage == GamePlayStage.LoadOfConsumers)
        {
            <Span>
                Now you can start adding the consumers until you will keep the total bilance under 5MW, but you cannot go to
                the minus bilance.
            </Span>
        }
        else if (GameStage == GamePlayStage.BalancingOfNetwork)
        {
            <Span>
                Try to keep the balance of the network as long as possible. You can add and remove the sources and
                consumers.You need to try to find the combination to reach 0 bilance to finish the game.
            </Span>
        }
    </Column>
</Row>
<Row Margin="Margin.Is2.FromTop.Is2.FromBottom">
    <Column Flex="Flex.JustifyContent.Center">
        @if (RestOfThePenalty > 0)
        {
            <Heading Size="HeadingSize.Is3" TextColor="TextColor.Danger">Rest of penalty: @(Math.Round(RestOfThePenalty, 0))
                seconds</Heading>
        }
    </Column>
</Row>

<Row Margin="Margin.Is2.FromTop.Is4.FromBottom" Padding="Padding.Is4">
    <Column ColumnSize="ColumnSize.Is8.Is2.WithOffset">
        <Row Background="Background.Secondary" Padding="Padding.Is4" Border="Border.Is3.Rounded.Secondary">
            <Column>
                <Row>
                    <Column Flex="Flex.JustifyContent.Center">
                        <Heading Size="HeadingSize.Is4" TextColor="TextColor.Light">Energy Sources</Heading>
                    </Column>
                </Row>
                <Row Margin="Margin.Is1.FromTop">
                    <Column Flex="Flex.JustifyContent.Center">
                        <MegaWattMeter @ref=megaWattMeterSourcesRef />
                    </Column>
                </Row>
            </Column>
            <Column>
                <Row>
                    <Column Flex="Flex.JustifyContent.Center">
                        <Heading Size="HeadingSize.Is4" TextColor="TextColor.Light">Total Balance</Heading>
                    </Column>
                </Row>
                <Row Margin="Margin.Is1.FromTop">
                    <Column Flex="Flex.JustifyContent.Center">
                        <MegaWattMeter @ref=megaWattMeterRef />
                    </Column>
                </Row>
            </Column>
            <Column>
                <Row>
                    <Column Flex="Flex.JustifyContent.Center">
                        <Heading Size="HeadingSize.Is4" TextColor="TextColor.Light">Energy Consumers</Heading>
                    </Column>
                </Row>
                <Row Margin="Margin.Is1.FromTop">
                    <Column Flex="Flex.JustifyContent.Center">
                        <MegaWattMeter @ref=megaWattMeterConsumersRef />
                    </Column>
                </Row>
            </Column>
        </Row>
    </Column>
</Row>

<BilanceDisplay @ref="bilanceDisplayRef" IsVisible="false" BilanceChanged="@onBilanceChangedHandler"
    BilanceSourcesChanged="@onBilanceSourcesChangedHandler"
    BilanceConsumersChanged="@onBilanceConsumersChangedHandler" />

<Row Margin="Margin.Is2.FromTop.Is2.FromBottom.Is2.FromStart">
    <Column Flex="Flex.JustifyContent.Center">
        <AllGamePiecesKeyboard @ref=allGamePiecesKeyboardRef OnBoardChanged="@onBoardChangedHandler" />
    </Column>
</Row>

<Row Margin="Margin.Is5.FromTop.Is2.FromBottom">
    <Column Flex="Flex.JustifyContent.Center">
        @if (GameResponseAction == GameResponseActions.EndOfTheGame_Success)
        {
            <Heading Size="HeadingSize.Is3" TextColor="TextColor.Success">
                Succesfull end of the game. You have reached 0 bilance.
            </Heading>
        }
        else
        {
            <Span>
                Game Response Action: @(
            Enum.GetName(typeof(GameResponseActions), GameResponseAction) ?? "Waiting for start"
            )
            </Span>
        }
    </Column>

    <Column Flex="Flex.JustifyContent.Center">
        Level: @(
        Enum.GetName(typeof(GamePlayStage), GameStage) ?? "Waiting for start"
        )
    </Column>
</Row>

@code {
    BilanceDisplay? bilanceDisplayRef;
    MegaWattMeter? megaWattMeterRef;
    MegaWattMeter? megaWattMeterSourcesRef;
    MegaWattMeter? megaWattMeterConsumersRef;

    [Parameter] public string GameBoardId { get; set; } = "testBoard";
    [Parameter] public string GameId { get; set; } = "testGame";
    [Parameter] public string DeviceId { get; set; } = "test";
    [Parameter] public EventCallback<string> GameEndedSuccsess { get; set; }
    [Parameter] public EventCallback<string> GameOver { get; set; }

    private Timer _timer;
    AllGamePiecesKeyboard? allGamePiecesKeyboardRef;
    GameResponseActionEventArgs lastresponse = new GameResponseActionEventArgs();
    double bilance = 0;
    double bilanceSources = 0;
    double bilanceConsumers = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _timer = new Timer(async (e) => { await Refresh(); }, null, TimeSpan.Zero, TimeSpan.FromMilliseconds(500));

            if (allGamePiecesKeyboardRef != null)
                await allGamePiecesKeyboardRef.ClearKeyboard(GameBoardId, DeviceId);

        }
        await base.OnAfterRenderAsync(firstRender);
    }

    public async Task NewGame(string gameId, string boardId, string deviceId)
    {
        if (!string.IsNullOrEmpty(boardId))
            GameBoardId = boardId;
        if (!string.IsNullOrEmpty(gameId))
            GameId = gameId;
        if (!string.IsNullOrEmpty(deviceId))
            DeviceId = deviceId;

        if (allGamePiecesKeyboardRef != null)
            await allGamePiecesKeyboardRef.ClearKeyboard(GameBoardId, DeviceId);

        if (megaWattMeterRef != null)
            await megaWattMeterRef.LoadValues(0);

        if (megaWattMeterSourcesRef != null)
            await megaWattMeterSourcesRef.LoadValues(0);
        if (megaWattMeterConsumersRef != null)
            await megaWattMeterConsumersRef.LoadValues(0);

        await InvokeAsync(StateHasChanged);
        //_timer = new Timer(async (e) => { await Refresh(); }, null, TimeSpan.Zero, TimeSpan.FromSeconds(1));
    }

    public async Task Refresh()
    {
        try
        {
            if (GameResponseAction == GameResponseActions.EndOfTheGame_Success)
            {
                //_timer.Dispose();
                //_timer = null;

                if (allGamePiecesKeyboardRef != null)
                    await allGamePiecesKeyboardRef.ClearKeyboard(GameBoardId, DeviceId);
                if (bilanceDisplayRef != null)
                    await bilanceDisplayRef.Refresh(GameBoardId);

                await GameEndedSuccsess.InvokeAsync(GameId);
            }
            else if (GameResponseAction == GameResponseActions.EndOfTheGame_Loose)
            {
                //_timer.Dispose();
                //_timer = null;

                if (allGamePiecesKeyboardRef != null)
                    await allGamePiecesKeyboardRef.ClearKeyboard(GameBoardId, DeviceId);

                await GameOver.InvokeAsync(GameId);
            }

            if (megaWattMeterRef != null)
                await megaWattMeterRef.LoadValues(bilance);
            if (megaWattMeterSourcesRef != null)
                await megaWattMeterSourcesRef.LoadValues(bilanceSources);
            if (megaWattMeterConsumersRef != null)
                await megaWattMeterConsumersRef.LoadValues(bilanceConsumers);
        }
        catch (Exception ex)
        {
            Console.WriteLine("Cannot refresh game component state: \n" + ex.Message);
        }

        await InvokeAsync(StateHasChanged);
    }

    public double ElapsedTime
    {
        get
        {
            if (AppData.GameResponseDataHistory.TryGetValue(GameId, out var response))
            {
                lastresponse = response;
                return response.ActualElapsedGameTime;
            }
            else
                return 0.0;
        }
    }

    public GameResponseActions GameResponseAction
    {
        get
        {
            if (AppData.GameResponseDataHistory.TryGetValue(GameId, out var response))
                return response.Action;
            else
                return GameResponseActions.StartingWithoutSources;
        }
    }

    public GamePlayStage GameStage
    {
        get
        {
            if (AppData.GameResponseDataHistory.TryGetValue(GameId, out var response))
                return response.Stage;
            else
                return GamePlayStage.None;
        }
    }

    public double RestOfThePenalty
    {
        get
        {
            if (AppData.GameResponseDataHistory.TryGetValue(GameId, out var response))
                return response.RestOfThePenalty;
            else
                return 0.0;
        }
    }

    public async Task onBoardChangedHandler(string message)
    {
        if (bilanceDisplayRef != null)
            await bilanceDisplayRef.Refresh(GameBoardId);
        if (megaWattMeterRef != null)
            await megaWattMeterRef.LoadValues(bilance);
    }

    public async Task onBilanceChangedHandler(double newBilance)
    {
        bilance = newBilance;

        if (megaWattMeterRef != null)
            await megaWattMeterRef.LoadValues(bilance);
    }

    public async Task onBilanceSourcesChangedHandler(double newBilance)
    {
        bilanceSources = newBilance;

        if (megaWattMeterSourcesRef != null)
            await megaWattMeterSourcesRef.LoadValues(bilanceSources);
    }

    public async Task onBilanceConsumersChangedHandler(double newBilance)
    {
        bilanceConsumers = newBilance;

        if (megaWattMeterConsumersRef != null)
            await megaWattMeterConsumersRef.LoadValues(bilanceConsumers);
    }
}