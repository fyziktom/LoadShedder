@using Newtonsoft.Json;
@inject HttpClient Http
@inject AppData AppData

<Router AppAssembly="@typeof(App).Assembly">
    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
        <FocusOnNavigate RouteData="@routeData" Selector="h1" />
    </Found>
    <NotFound>
        <PageTitle>Not found</PageTitle>
        <LayoutView Layout="@typeof(MainLayout)">
            <p role="alert">Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>
<NotificationProvider />

@code {

    [Inject] INotificationService NotificationService { get; set; }

    private Timer _timer;

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            _timer = new Timer(async (e) => { await PollEvents(); }, null, TimeSpan.Zero, TimeSpan.FromMilliseconds(500));

        return base.OnAfterRenderAsync(firstRender);
    }

    private async Task PollEvents()
    {
        var response = string.Empty;

        try
        {
            response = await Http.GetStringAsync("api/GetGameResponseAction");
            if (response == null)
                return;
        }
        catch(Exception ex)
        {
            Console.WriteLine("Cannot request the game response actions: \n" + ex.Message);
        }
        GameResponseActionEventArgs? data = null;
        try
        {
            data = JsonConvert.DeserializeObject<GameResponseActionEventArgs>(response);
        }
        catch(Exception ex)
        {
            Console.WriteLine("Cannot parse the event args data from the Game Response Actions Event." + ex.Message);
        }

        if (data == null)
            return;


        var playername = string.Empty;
        try
        {
            var player = await Http.GetFromJsonAsync<Player>($"api/GetPlayer/{data.PlayerId}");
            if (player != null)
                playername = player.Name;
        }
        catch (Exception ex)
        {
            Console.WriteLine("Cannot get the player info: \n" + ex.Message);
        }

        if (data.Action != GameResponseActions.BlackOut && data.Action != GameResponseActions.BlackoutRecovery)
        {
            var sendinfo = true;
            if (AppData.GameResponseDataHistory.TryGetValue(data.GameId, out var h))
            {
                if (h.Action == data.Action && h.Stage == data.Stage)
                    sendinfo = false;              

            }

            if(sendinfo)
            {
                if (!string.IsNullOrEmpty(playername))
                    await NotificationService.Info($"{playername} - {Enum.GetName(typeof(GameResponseActions), data.Action)}", "Game Info");
                else    
                    await NotificationService.Info($"{data.PlayerId} - {Enum.GetName(typeof(GameResponseActions), data.Action)}", "Game Info");
            }
        }
        else if (data.Action != GameResponseActions.BlackOut)
        {
            var sendinfo = true;
            if (AppData.GameResponseDataHistory.TryGetValue(data.GameId, out var h))
            {
                if (h.Action == data.Action &&
                    h.Stage == data.Stage &&
                    h.RestOfThePenalty == data.RestOfThePenalty &&
                    h.ActualBilanceConsumers == data.ActualBilanceConsumers &&
                    h.ActualBilanceSources == data.ActualBilanceSources &&
                    h.ActualBilance == data.ActualBilance)
                    sendinfo = false;
            }

            if (sendinfo)
            {
                if (!string.IsNullOrEmpty(playername))
                    await NotificationService.Error($"{playername} - {Enum.GetName(typeof(GameResponseActions), data.Action)}", "Blackout");
                else    
                    await NotificationService.Error($"{data.PlayerId} - {Enum.GetName(typeof(GameResponseActions), data.Action)}", "Blackout");
            }
        }

        AppData.GameResponseDataHistory.TryRemove(data.GameId, out var history);
        AppData.GameResponseDataHistory.TryAdd(data.GameId, data);

        await InvokeAsync(StateHasChanged);

    }
    
}